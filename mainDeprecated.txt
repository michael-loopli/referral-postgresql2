// func GetReferralRequestsByCompanyIDHandler(w http.ResponseWriter, r *http.Request) {
// 	sessionID, err := r.Cookie("session_id")
// 	if err != nil {
// 		http.Error(w, "Unauthorized", http.StatusUnauthorized)
// 		return
// 	}
// 	var user User
// 	err = db.QueryRow("SELECT u.id, u.email, u.username, u.password, u.role, u.company_id FROM users u "+
// 		"INNER JOIN sessions s ON u.id = s.user_id "+
// 		"WHERE s.session_id = $1", sessionID.Value).
// 		Scan(&user.ID, &user.Email, &user.Username, &user.Password, &user.Role, &user.CompanyID)
// 	if err != nil {
// 		http.Error(w, "Unauthorized", http.StatusUnauthorized)
// 		return
// 	}
// 	vars := mux.Vars(r)
// 	companyID, err := strconv.Atoi(vars["companyID"])
// 	if err != nil {
// 		http.Error(w, "Invalid company ID", http.StatusBadRequest)
// 		return
// 	}
// 	var referralRequests []ReferralRequest
// 	rows, err := db.Query("SELECT r.id, r.title, r.content, r.username, r.referrer_user_id, r.company_id, r.referee_client, r.referee_client_email, r.created_at, r.status, c.name AS company_name "+
// 		"FROM referral_requests r "+
// 		"LEFT JOIN companies c ON r.company_id = c.id "+
// 		"WHERE r.company_id = $1 "+
// 		"ORDER BY r.created_at DESC", companyID)
// 	if err != nil {
// 		log.Println("Error fetching referral requests:", err)
// 		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
// 		return
// 	}
// 	defer rows.Close()
// 	for rows.Next() {
// 		var referralRequest ReferralRequest
// 		err := rows.Scan(&referralRequest.ID, &referralRequest.Title, &referralRequest.Content, &referralRequest.Username,
// 			&referralRequest.ReferrerUserID, &referralRequest.CompanyID, &referralRequest.RefereeClient, &referralRequest.RefereeClientEmail,
// 			&referralRequest.CreatedAt, &referralRequest.Status, &referralRequest.CompanyName)
// 		if err != nil {
// 			log.Println("Error scanning referral request row:", err)
// 			http.Error(w, "Internal Server Error", http.StatusInternalServerError)
// 			return
// 		}
// 		referralRequests = append(referralRequests, referralRequest)
// 	}
// 	if err := rows.Err(); err != nil {
// 		log.Println("Error iterating over referral request rows:", err)
// 		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
// 		return
// 	}
// 	json.NewEncoder(w).Encode(referralRequests)
// }

// func GetReferralRequestByIDHandler(w http.ResponseWriter, r *http.Request) {
// 	sessionID, err := r.Cookie("session_id")
// 	if err != nil {
// 		http.Error(w, "Unauthorized", http.StatusUnauthorized)
// 		return
// 	}
// 	var user User
// 	err = db.QueryRow("SELECT u.id, u.email, u.username, u.password, u.role, u.company_id FROM users u "+
// 		"INNER JOIN sessions s ON u.id = s.user_id "+
// 		"WHERE s.session_id = $1", sessionID.Value).
// 		Scan(&user.ID, &user.Email, &user.Username, &user.Password, &user.Role, &user.CompanyID)
// 	if err != nil {
// 		http.Error(w, "Unauthorized", http.StatusUnauthorized)
// 		return
// 	}
// 	vars := mux.Vars(r)
// 	referralRequestID, err := strconv.Atoi(vars["referralRequestID"])
// 	if err != nil {
// 		http.Error(w, "Invalid referral request ID", http.StatusBadRequest)
// 		return
// 	}
// 	var referralRequest ReferralRequest
// 	err = db.QueryRow("SELECT r.id, r.title, r.content, r.username, r.referrer_user_id, r.company_id, r.referee_client, r.referee_client_email, r.created_at, r.status, c.name AS company_name "+
// 		"FROM referral_requests r "+
// 		"LEFT JOIN companies c ON r.company_id = c.id "+
// 		"WHERE r.id = $1", referralRequestID).
// 		Scan(&referralRequest.ID, &referralRequest.Title, &referralRequest.Content, &referralRequest.Username,
// 			&referralRequest.ReferrerUserID, &referralRequest.CompanyID, &referralRequest.RefereeClient, &referralRequest.RefereeClientEmail,
// 			&referralRequest.CreatedAt, &referralRequest.Status, &referralRequest.CompanyName)
// 	if err != nil {
// 		log.Println("Error fetching referral request:", err)
// 		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
// 		return
// 	}
// 	json.NewEncoder(w).Encode(referralRequest)
// }



// func UserProfileHandler(w http.ResponseWriter, r *http.Request) {
// 	sessionCookie, err := r.Cookie("session_id")
// 	if err != nil {
// 		http.Error(w, "Unauthorized", http.StatusUnauthorized)
// 		return
// 	}
// 	var userID int
// 	err = db.QueryRow("SELECT user_id FROM sessions WHERE session_id = $1 AND expires_at > NOW()", sessionCookie.Value).Scan(&userID)
// 	if err != nil {
// 		http.Error(w, "Unauthorized", http.StatusUnauthorized)
// 		return
// 	}
// 	var user struct {
// 		Email     string `json:"email"`
// 		Username  string `json:"username"`
// 		Role      string `json:"role"`
// 		CompanyID int    `json:"company_id"`
// 	}
// 	err = db.QueryRow("SELECT email, username, role, company_id FROM users WHERE id = $1", userID).Scan(&user.Email, &user.Username, &user.Role, &user.CompanyID)
// 	if err != nil {
// 		http.Error(w, "Error fetching user data", http.StatusInternalServerError)
// 		return
// 	}
// 	response := map[string]interface{}{
// 		"email":    user.Email,
// 		"username": user.Username,
// 		"role":     user.Role,
// 		"company":  user.CompanyID,
// 	}
// 	w.Header().Set("Content-Type", "application/json")
// 	json.NewEncoder(w).Encode(response)
// }

// func AdminProfileHandler(w http.ResponseWriter, r *http.Request) {
// 	pageData := GetAuthenticatedUserData(r)
// 	if !pageData.IsAuthenticated {
// 		http.Error(w, "Unauthorized", http.StatusUnauthorized)
// 		return
// 	}
// 	users, err := getUsersByCompany(pageData.CompanyID)
// 	if err != nil {
// 		log.Println("Error fetching users:", err)
// 		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
// 		return
// 	}
// 	json.NewEncoder(w).Encode(users)
// }

// func PlatformAdminHandler(w http.ResponseWriter, r *http.Request) {
// 	pageData := GetAuthenticatedUserData(r)
// 	if !pageData.IsAuthenticated {
// 		http.Error(w, "Unauthorized", http.StatusUnauthorized)
// 		return
// 	}
// 	companies, err := GetAllCompanies()
// 	if err != nil {
// 		log.Println("Error fetching companies:", err)
// 		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
// 		return
// 	}
// 	json.NewEncoder(w).Encode(companies)
// }

// func SuperAdminHandler(w http.ResponseWriter, r *http.Request) {
// 	pageData := GetAuthenticatedUserData(r)
// 	if !pageData.IsAuthenticated {
// 		http.Error(w, "Unauthorized", http.StatusUnauthorized)
// 		return
// 	}

// 	data := struct {
// 		Companies        []Company         `json:"companies"`
// 		Users            []User            `json:"users"`
// 		ReferralRequests []ReferralRequest `json:"referralRequests"`
// 	}{}

// 	companies, err := GetAllCompanies()
// 	if err != nil {
// 		log.Println("Error fetching companies:", err)
// 		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
// 		return
// 	}
// 	data.Companies = companies

// 	users, err := GetAllUsers()
// 	if err != nil {
// 		log.Println("Error fetching users:", err)
// 		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
// 		return
// 	}
// 	data.Users = users

// 	referralRequests, err := GetAllReferralRequests()
// 	if err != nil {
// 		log.Println("Error fetching referral requests:", err)
// 		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
// 		return
// 	}
// 	data.ReferralRequests = referralRequests

// 	w.Header().Set("Content-Type", "application/json")
// 	json.NewEncoder(w).Encode(data)
// }

// func DeleteCompanyHandler(w http.ResponseWriter, r *http.Request) {
// 	var request struct {
// 		CompanyID int `json:"company_id"`
// 	}
// 	if err := json.NewDecoder(r.Body).Decode(&request); err != nil {
// 		http.Error(w, err.Error(), http.StatusBadRequest)
// 		return
// 	}
// 	_, err := db.Exec("DELETE FROM companies WHERE id = $1", request.CompanyID)
// 	if err != nil {
// 		log.Println("Error deleting company:", err)
// 		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
// 		return
// 	}
// 	w.WriteHeader(http.StatusOK)
// }

// func GetReferralRequestsByReferrerHandler(w http.ResponseWriter, r *http.Request) {
// 	sessionID, err := r.Cookie("session_id")
// 	if err != nil {
// 		http.Error(w, "Unauthorized", http.StatusUnauthorized)
// 		return
// 	}
// 	var user User
// 	err = db.QueryRow("SELECT u.id, u.email, u.username, u.password, u.role, u.company_id FROM users u "+
// 		"INNER JOIN sessions s ON u.id = s.user_id "+
// 		"WHERE s.session_id = $1", sessionID.Value).
// 		Scan(&user.ID, &user.Email, &user.Username, &user.Password, &user.Role, &user.CompanyID)
// 	if err != nil {
// 		http.Error(w, "Unauthorized", http.StatusUnauthorized)
// 		return
// 	}
// 	vars := mux.Vars(r)
// 	referrerUserID, err := strconv.Atoi(vars["referrerUserID"])
// 	if err != nil {
// 		http.Error(w, "Invalid referrer user ID", http.StatusBadRequest)
// 		return
// 	}
// 	var referralRequests []ReferralRequest
// 	rows, err := db.Query("SELECT r.id, r.title, r.content, r.username, r.referrer_user_id, r.company_id, r.referee_client, r.referee_client_email, r.created_at, r.status, c.name AS company_name "+
// 		"FROM referral_requests r "+
// 		"LEFT JOIN companies c ON r.company_id = c.id "+
// 		"WHERE r.referrer_user_id = $1 "+
// 		"ORDER BY r.created_at DESC", referrerUserID)
// 	if err != nil {
// 		log.Println("Error fetching referral requests:", err)
// 		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
// 		return
// 	}
// 	defer rows.Close()
// 	for rows.Next() {
// 		var referralRequest ReferralRequest
// 		err := rows.Scan(&referralRequest.ID, &referralRequest.Title, &referralRequest.Content, &referralRequest.Username,
// 			&referralRequest.ReferrerUserID, &referralRequest.CompanyID, &referralRequest.RefereeClient, &referralRequest.RefereeClientEmail,
// 			&referralRequest.CreatedAt, &referralRequest.Status, &referralRequest.CompanyName)
// 		if err != nil {
// 			log.Println("Error scanning referral request row:", err)
// 			http.Error(w, "Internal Server Error", http.StatusInternalServerError)
// 			return
// 		}
// 		referralRequests = append(referralRequests, referralRequest)
// 	}
// 	if err := rows.Err(); err != nil {
// 		log.Println("Error iterating over referral request rows:", err)
// 		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
// 		return
// 	}
// 	json.NewEncoder(w).Encode(referralRequests)
// }

// func GetReferralRequestsHandler(w http.ResponseWriter, r *http.Request) {
// 	rows, err := db.Query("SELECT id, title, content, username, referee_client, referee_client_email, created_at, status, company_name FROM referral_requests")
// 	if err != nil {
// 		http.Error(w, err.Error(), http.StatusInternalServerError)
// 		return
// 	}
// 	defer rows.Close()

// 	var requests []ReferralRequest
// 	for rows.Next() {
// 		var request ReferralRequest
// 		if err := rows.Scan(&request.ID, &request.Title, &request.Content, &request.Username, &request.RefereeClient, &request.RefereeClientEmail, &request.CreatedAt, &request.Status, &request.CompanyName); err != nil {
// 			http.Error(w, err.Error(), http.StatusInternalServerError)
// 			return
// 		}
// 		requests = append(requests, request)
// 	}

// 	if err := json.NewEncoder(w).Encode(requests); err != nil {
// 		http.Error(w, err.Error(), http.StatusInternalServerError)
// 	}
// }

// func getUsersByCompany(companyID int) ([]User, error) {
// 	rows, err := db.Query("SELECT id, email, username, role, company_id FROM users WHERE company_id = $1", companyID)
// 	if err != nil {
// 		return nil, err
// 	}
// 	defer rows.Close()
// 	var users []User
// 	for rows.Next() {
// 		var user User
// 		err := rows.Scan(&user.ID, &user.Email, &user.Username, &user.Role, &user.CompanyID)
// 		if err != nil {
// 			return nil, err
// 		}
// 		users = append(users, user)
// 	}
// 	return users, nil
// }

// func GetAuthenticatedUserData(r *http.Request) PageData {
// 	var pageData PageData
// 	sessionCookie, err := r.Cookie("session_id")
// 	if err != nil {
// 		pageData.IsAuthenticated = false
// 		log.Println("No session cookie found:", err)
// 		return pageData
// 	}
// 	log.Println("Session cookie found:", sessionCookie.Value)
// 	var userID int
// 	err = db.QueryRow("SELECT user_id FROM sessions WHERE session_id = $1 AND expires_at > NOW()", sessionCookie.Value).Scan(&userID)
// 	if err != nil {
// 		pageData.IsAuthenticated = false
// 		log.Println("Invalid session:", err)
// 		return pageData
// 	}
// 	var username, role string
// 	var companyID int
// 	err = db.QueryRow("SELECT username, role, company_id FROM users WHERE id = $1", userID).Scan(&username, &role, &companyID)
// 	if err != nil {
// 		pageData.IsAuthenticated = false
// 		log.Println("Error fetching user data:", err)
// 		return pageData
// 	}
// 	pageData.UserID = userID
// 	pageData.Username = username
// 	pageData.Role = role
// 	pageData.CompanyID = companyID
// 	pageData.IsAuthenticated = true
// 	return pageData
// }

// func GetAllCompanies() ([]Company, error) {
// 	var companies []Company

// 	rows, err := db.Query("SELECT id, name FROM companies")
// 	if err != nil {
// 		return nil, err
// 	}
// 	defer rows.Close()

// 	for rows.Next() {
// 		var company Company
// 		err := rows.Scan(&company.ID, &company.Name)
// 		if err != nil {
// 			return nil, err
// 		}
// 		companies = append(companies, company)
// 	}
// 	if err := rows.Err(); err != nil {
// 		return nil, err
// 	}

// 	return companies, nil
// }

// func GetAllUsers() ([]User, error) {
// 	var users []User

// 	query := `
// 		SELECT users.id, users.email, users.username, users.role, users.company_id, companies.name
// 		FROM users
// 		LEFT JOIN companies ON users.company_id = companies.id
// 	`
// 	rows, err := db.Query(query)
// 	if err != nil {
// 		return nil, err
// 	}
// 	defer rows.Close()

// 	for rows.Next() {
// 		var user User
// 		err := rows.Scan(&user.ID, &user.Email, &user.Username, &user.Role, &user.CompanyID, &user.CompanyName)
// 		if err != nil {
// 			return nil, err
// 		}
// 		users = append(users, user)
// 	}
// 	if err := rows.Err(); err != nil {
// 		return nil, err
// 	}

// 	return users, nil
// }

// func GetAllReferralRequests() ([]ReferralRequest, error) {
// 	var requests []ReferralRequest

// 	rows, err := db.Query(`
// 		SELECT rr.id, rr.title, rr.content, u.username, rr.referee_client, rr.referee_client_email, rr.created_at, rr.status, c.name
// 		FROM referral_requests rr
// 		JOIN users u ON rr.referrer_user_id = u.id
// 		JOIN companies c ON rr.company_id = c.id
// 	`)
// 	if err != nil {
// 		return nil, err
// 	}
// 	defer rows.Close()

// 	for rows.Next() {
// 		var request ReferralRequest
// 		err := rows.Scan(&request.ID, &request.Title, &request.Content, &request.Username, &request.RefereeClient, &request.RefereeClientEmail, &request.CreatedAt, &request.Status, &request.CompanyName)
// 		if err != nil {
// 			return nil, err
// 		}
// 		requests = append(requests, request)
// 	}
// 	if err := rows.Err(); err != nil {
// 		return nil, err
// 	}

// 	return requests, nil
// }

// func GetReferralRequestsByCompanyID(companyID int) ([]ReferralRequest, error) {
// 	rows, err := db.Query(`
//         SELECT
//             referral_requests.id, referral_requests.title, referral_requests.content, referral_requests.referrer_user_id, referral_requests.company_id, referral_requests.referee_client, referral_requests.referee_client_email, referral_requests.created_at, referral_requests.status,users.username
//         FROM
//             referral_requests
//         JOIN
//             users ON referral_requests.referrer_user_id = users.id
//         WHERE
//             referral_requests.company_id = $1`, companyID)
// 	if err != nil {
// 		return nil, err
// 	}
// 	defer rows.Close()

// 	var requests []ReferralRequest
// 	for rows.Next() {
// 		var request ReferralRequest
// 		err := rows.Scan(&request.ID, &request.Title, &request.Content, &request.ReferrerUserID, &request.CompanyID, &request.RefereeClient, &request.RefereeClientEmail, &request.CreatedAt, &request.Status, &request.Username)
// 		if err != nil {
// 			return nil, err
// 		}
// 		requests = append(requests, request)
// 	}

// 	if err := rows.Err(); err != nil {
// 		return nil, err
// 	}

// 	return requests, nil
// }

// func ReferralRequestHandler(w http.ResponseWriter, r *http.Request) {
// 	sessionID, err := r.Cookie("session_id")
// 	if err != nil {
// 		http.Error(w, "Unauthorized", http.StatusUnauthorized)
// 		return
// 	}

// 	var user User
// 	err = db.QueryRow("SELECT u.id, u.email, u.username, u.password, u.role, u.company_id FROM users u "+
// 		"INNER JOIN sessions s ON u.id = s.user_id "+
// 		"WHERE s.session_id = $1", sessionID.Value).
// 		Scan(&user.ID, &user.Email, &user.Username, &user.Password, &user.Role, &user.CompanyID)
// 	if err != nil {
// 		http.Error(w, "Unauthorized", http.StatusUnauthorized)
// 		return
// 	}

// 	var referralRequests []ReferralRequest
// 	rows, err := db.Query("SELECT r.id, r.title, r.content, r.username, r.referrer_user_id, r.company_id, r.referee_client, r.referee_client_email, r.created_at, r.status, c.name AS company_name "+
// 		"FROM referral_requests r "+
// 		"LEFT JOIN companies c ON r.company_id = c.id "+
// 		"WHERE r.company_id = $1 "+
// 		"ORDER BY r.created_at DESC", user.CompanyID)
// 	if err != nil {
// 		log.Println("Error fetching referral requests:", err)
// 		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
// 		return
// 	}
// 	defer rows.Close()

// 	for rows.Next() {
// 		var referralRequest ReferralRequest
// 		err := rows.Scan(&referralRequest.ID, &referralRequest.Title, &referralRequest.Content, &referralRequest.Username,
// 			&referralRequest.ReferrerUserID, &referralRequest.CompanyID, &referralRequest.RefereeClient, &referralRequest.RefereeClientEmail,
// 			&referralRequest.CreatedAt, &referralRequest.Status, &referralRequest.CompanyName)
// 		if err != nil {
// 			log.Println("Error scanning referral request row:", err)
// 			http.Error(w, "Internal Server Error", http.StatusInternalServerError)
// 			return
// 		}
// 		if referralRequest.CompanyName == "" {
// 			log.Printf("Empty company name for referral request ID: %d, Company ID: %d", referralRequest.ID, referralRequest.CompanyID)
// 		}
// 		referralRequests = append(referralRequests, referralRequest)
// 	}

// 	if err := rows.Err(); err != nil {
// 		log.Println("Error iterating over referral request rows:", err)
// 		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
// 		return
// 	}

// 	w.Header().Set("Content-Type", "application/json")
// 	if err := json.NewEncoder(w).Encode(referralRequests); err != nil {
// 		log.Println("Error encoding referral requests to JSON:", err)
// 		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
// 	}
// }

// func SubmitReferralRequestHandler(w http.ResponseWriter, r *http.Request) {
// 	sessionID, err := r.Cookie("session_id")
// 	if err != nil {
// 		http.Error(w, "Unauthorized", http.StatusUnauthorized)
// 		return
// 	}
// 	var user User
// 	err = db.QueryRow("SELECT u.id, u.email, u.username, u.password, u.role, u.company_id FROM users u "+
// 		"INNER JOIN sessions s ON u.id = s.user_id "+
// 		"WHERE s.session_id = $1", sessionID.Value).
// 		Scan(&user.ID, &user.Email, &user.Username, &user.Password, &user.Role, &user.CompanyID)
// 	if err != nil {
// 		http.Error(w, "Unauthorized", http.StatusUnauthorized)
// 		return
// 	}
// 	var referralRequest ReferralRequest
// 	if err := json.NewDecoder(r.Body).Decode(&referralRequest); err != nil {
// 		http.Error(w, err.Error(), http.StatusBadRequest)
// 		return
// 	}
// 	_, err = db.Exec("UPDATE referral_requests SET status = $1 WHERE id = $2", referralRequest.Status, referralRequest.ID)
// 	if err != nil {
// 		log.Println("Error updating referral request:", err)
// 		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
// 		return
// 	}
// 	w.WriteHeader(http.StatusOK)
// }
